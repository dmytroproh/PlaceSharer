@model PlaceSharer.WEB.Models.UserPlaceViewModel

@{
    ViewBag.Title = "Create place";
}

<div class="main">

    <div >
        <h3 style="margin-left:25%" >Create place</h3>
        @using (Html.BeginForm(Html.BeginForm("Create", "Place",
            new { ReturnUrl = ViewBag.ReturnUrl },
            FormMethod.Post, new { @class = "contact_form" })))
        {
            @Html.ValidationSummary()


            <ul>
                <li>
                    @Html.LabelFor(model => model.Name)
                    @Html.EditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </li>

                <li>
                    @Html.LabelFor(model => model.Description)
                    @Html.EditorFor(model => model.Description)
                    @Html.ValidationMessageFor(model => model.Description)
                </li>

                <li>
                    @Html.LabelFor(model => model.GeoLat)
                    @Html.EditorFor(model => model.GeoLat)
                    @Html.ValidationMessageFor(model => model.GeoLat)
                </li>

                <li>
                    @Html.LabelFor(model => model.GeoLong)
                    @Html.EditorFor(model => model.GeoLong)
                    @Html.ValidationMessageFor(model => model.GeoLong)
                </li>

                <li>
                   
                    <button class="submit" type="submit" value="Create Place" id="create-account">Create</button>
                </li>
            </ul>
        }
   
       </div>
</div>

<div id="mapCanvas"></div>
<div id="infoPanel">
    <b>Marker status:</b>
    <div id="markerStatus"><i>Click and drag the marker.</i></div>
    <b>Current position:</b>
    <div id="info"></div>
    <b>Closest matching address:</b>
    <div id="address"></div>
    <input type="text" id="latFld">
    <input type="text" id="lngFld">
</div>
<script src="https://maps.google.com/maps/api/js?key=AIzaSyAf8q-0gl4zbuqzUd48OVK6kS-RFFcZneg" type="text/javascript"></script>

<style>
    .stationInfo {
        height: 150px;
        width: 250px;
    }
      #mapCanvas {
    width: 500px;
    height: 400px;
    float: left;
  }
  #infoPanel {
    float: left;
    margin-left: 10px;
  }
  #infoPanel div {
    margin-bottom: 5px;
  }
</style>

<div id="canvas" style="height: 300px; width:700px;  margin-left: 300px"></div>


@section scripts {
    <script type="text/javascript">

        var geocoder = new google.maps.Geocoder();
        var markersArray = [];
        var map;

        function geocodePosition(pos) {
            geocoder.geocode({
                latLng: pos
            }, function (responses) {
                if (responses && responses.length > 0) {
                    updateMarkerAddress(responses[0].formatted_address);
                } else {
                    updateMarkerAddress('Cannot determine address at this location.');
                }
            });
        }

        function updateMarkerStatus(str) {
            document.getElementById('markerStatus').innerHTML = str;
        }

        function updateMarkerPosition(latLng) {
            document.getElementById('info').innerHTML = [
              latLng.lat(),
              latLng.lng()
            ].join(', ');
        }

        function updateMarkerAddress(str) {
            document.getElementById('address').innerHTML = str;
        }

        function initialize() {
            var latLng = new google.maps.LatLng(-34.397, 150.644);
            var map = new google.maps.Map(document.getElementById('mapCanvas'), {
                zoom: 1,
                center: latLng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            var marker = new google.maps.Marker({
                position: latLng,
                title: 'Point A',
                map: map,
                draggable: true
            });
           
            // Update current position info.
            updateMarkerPosition(latLng);
            geocodePosition(latLng);

            // Add dragging event listeners.
            google.maps.event.addListener(marker, 'dragstart', function () {
                updateMarkerAddress('Dragging...');
            });

            google.maps.event.addListener(marker, 'drag', function () {
                updateMarkerStatus('Dragging...');
                updateMarkerPosition(marker.getPosition());
            });

            google.maps.event.addListener(marker, 'dragend', function () {
                updateMarkerStatus('Drag ended');
                geocodePosition(marker.getPosition());
            });
            google.maps.event.addListener(map, "click", function (event) {
                placeMarker(event.latLng);
                updateMarkerPosition(event.latLng);
                marker.setPosition(event.latLng);
                @*if(event.latLng != null)
                {
                    @Html.Hidden("GeoLat", "event.latLng.lat()")
                    @Html.Hidden("GeoLong", "event.latLng.lat()")
                    @Model.GeoLat = event.latLng.lat();
                    @Model.GeoLong = event.latLng.lng();
                }*@
            });
        }
        function placeMarker(location) {
            // first remove all markers if there are any
            deleteOverlays();

            var marker = new google.maps.Marker({
                position: location,
                map: map
            });

            // add marker in markers array
            markersArray.push(marker);

            //map.setCenter(location);
        }

        // Deletes all markers in the array by removing references to them
        function deleteOverlays() {
            if (markersArray) {
                for (i in markersArray) {
                    markersArray[i].setMap(null);
                }
                markersArray.length = 0;
            }
        }
        // Onload handler to fire off the app.
        google.maps.event.addDomListener(window, 'load', initialize);

    </script>
}
